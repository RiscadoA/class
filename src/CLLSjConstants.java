/* Generated By:JavaCC: Do not edit this line. CLLSjConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CLLSjConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int TO = 10;
  /** RegularExpression Id. */
  int LET = 11;
  /** RegularExpression Id. */
  int LETC = 12;
  /** RegularExpression Id. */
  int IN = 13;
  /** RegularExpression Id. */
  int REC = 14;
  /** RegularExpression Id. */
  int UNSAFE_REC = 15;
  /** RegularExpression Id. */
  int COREC = 16;
  /** RegularExpression Id. */
  int LETB = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int COINT = 19;
  /** RegularExpression Id. */
  int LINT = 20;
  /** RegularExpression Id. */
  int LCOINT = 21;
  /** RegularExpression Id. */
  int LBOOL = 22;
  /** RegularExpression Id. */
  int LCOBOOL = 23;
  /** RegularExpression Id. */
  int LSTRING = 24;
  /** RegularExpression Id. */
  int LCOSTRING = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int PRINT = 27;
  /** RegularExpression Id. */
  int PRINTLN = 28;
  /** RegularExpression Id. */
  int INFO = 29;
  /** RegularExpression Id. */
  int REPEAT = 30;
  /** RegularExpression Id. */
  int CLLTYPE = 31;
  /** RegularExpression Id. */
  int SEND = 32;
  /** RegularExpression Id. */
  int INCLUDE = 33;
  /** RegularExpression Id. */
  int RECV = 34;
  /** RegularExpression Id. */
  int SENDT = 35;
  /** RegularExpression Id. */
  int RECVT = 36;
  /** RegularExpression Id. */
  int DISCARD = 37;
  /** RegularExpression Id. */
  int USE = 38;
  /** RegularExpression Id. */
  int SOME = 39;
  /** RegularExpression Id. */
  int RELEASE = 40;
  /** RegularExpression Id. */
  int TAKE = 41;
  /** RegularExpression Id. */
  int PUT = 42;
  /** RegularExpression Id. */
  int FWD = 43;
  /** RegularExpression Id. */
  int FWDB = 44;
  /** RegularExpression Id. */
  int CUT = 45;
  /** RegularExpression Id. */
  int CCUT = 46;
  /** RegularExpression Id. */
  int MIX = 47;
  /** RegularExpression Id. */
  int CMIX = 48;
  /** RegularExpression Id. */
  int CASE = 49;
  /** RegularExpression Id. */
  int CHOICE = 50;
  /** RegularExpression Id. */
  int OFFER = 51;
  /** RegularExpression Id. */
  int OF = 52;
  /** RegularExpression Id. */
  int TYPE = 53;
  /** RegularExpression Id. */
  int PROC = 54;
  /** RegularExpression Id. */
  int STATE = 55;
  /** RegularExpression Id. */
  int STATEL = 56;
  /** RegularExpression Id. */
  int USAGE = 57;
  /** RegularExpression Id. */
  int USAGEL = 58;
  /** RegularExpression Id. */
  int STATEB = 59;
  /** RegularExpression Id. */
  int USAGEB = 60;
  /** RegularExpression Id. */
  int STATEBL = 61;
  /** RegularExpression Id. */
  int USAGEBL = 62;
  /** RegularExpression Id. */
  int AFFINE = 63;
  /** RegularExpression Id. */
  int COAFFINE = 64;
  /** RegularExpression Id. */
  int CELL = 65;
  /** RegularExpression Id. */
  int RD = 66;
  /** RegularExpression Id. */
  int WRT = 67;
  /** RegularExpression Id. */
  int LOCK = 68;
  /** RegularExpression Id. */
  int UNLK = 69;
  /** RegularExpression Id. */
  int CELLB = 70;
  /** RegularExpression Id. */
  int EMPTY = 71;
  /** RegularExpression Id. */
  int CLOSE = 72;
  /** RegularExpression Id. */
  int CCLOSE = 73;
  /** RegularExpression Id. */
  int SHARE = 74;
  /** RegularExpression Id. */
  int SSHARE = 75;
  /** RegularExpression Id. */
  int SHAREL = 76;
  /** RegularExpression Id. */
  int SHARER = 77;
  /** RegularExpression Id. */
  int UNFOLD = 78;
  /** RegularExpression Id. */
  int QUIT = 79;
  /** RegularExpression Id. */
  int SLEEP = 80;
  /** RegularExpression Id. */
  int CALL = 81;
  /** RegularExpression Id. */
  int OR = 82;
  /** RegularExpression Id. */
  int AND = 83;
  /** RegularExpression Id. */
  int REPL = 84;
  /** RegularExpression Id. */
  int TRUE = 85;
  /** RegularExpression Id. */
  int FALSE = 86;
  /** RegularExpression Id. */
  int RAND = 87;
  /** RegularExpression Id. */
  int STRUC = 88;
  /** RegularExpression Id. */
  int COSTRUC = 89;
  /** RegularExpression Id. */
  int MUT = 90;
  /** RegularExpression Id. */
  int TRACE = 91;
  /** RegularExpression Id. */
  int COMUT = 92;
  /** RegularExpression Id. */
  int SAML = 93;
  /** RegularExpression Id. */
  int SAMR = 94;
  /** RegularExpression Id. */
  int lab = 95;
  /** RegularExpression Id. */
  int Id = 96;
  /** RegularExpression Id. */
  int Num = 97;
  /** RegularExpression Id. */
  int VBAR = 98;
  /** RegularExpression Id. */
  int LEFTA = 99;
  /** RegularExpression Id. */
  int RIGHTA = 100;
  /** RegularExpression Id. */
  int PLUS = 101;
  /** RegularExpression Id. */
  int MINUS = 102;
  /** RegularExpression Id. */
  int TIMES = 103;
  /** RegularExpression Id. */
  int DIV = 104;
  /** RegularExpression Id. */
  int NOT = 105;
  /** RegularExpression Id. */
  int DOT = 106;
  /** RegularExpression Id. */
  int BANG = 107;
  /** RegularExpression Id. */
  int WHY = 108;
  /** RegularExpression Id. */
  int WHYY = 109;
  /** RegularExpression Id. */
  int LPAR = 110;
  /** RegularExpression Id. */
  int RPAR = 111;
  /** RegularExpression Id. */
  int LBRA = 112;
  /** RegularExpression Id. */
  int RBRA = 113;
  /** RegularExpression Id. */
  int LE = 114;
  /** RegularExpression Id. */
  int IMP = 115;
  /** RegularExpression Id. */
  int GE = 116;
  /** RegularExpression Id. */
  int LT = 117;
  /** RegularExpression Id. */
  int GT = 118;
  /** RegularExpression Id. */
  int EQ = 119;
  /** RegularExpression Id. */
  int EQ1 = 120;
  /** RegularExpression Id. */
  int NEQ = 121;
  /** RegularExpression Id. */
  int HAT = 122;
  /** RegularExpression Id. */
  int SEMIC = 123;
  /** RegularExpression Id. */
  int COMMA = 124;
  /** RegularExpression Id. */
  int COL = 125;
  /** RegularExpression Id. */
  int TERM = 126;
  /** RegularExpression Id. */
  int STRING = 127;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COM_NEXT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"for\"",
    "\"to\"",
    "\"let\"",
    "\"letc\"",
    "\"in\"",
    "\"rec\"",
    "\"unsafe_rec\"",
    "\"corec\"",
    "\"let!\"",
    "\"int\"",
    "\"coint\"",
    "\"lint\"",
    "\"colint\"",
    "\"lbool\"",
    "\"colbool\"",
    "\"lstring\"",
    "\"colstring\"",
    "\"if\"",
    "\"print\"",
    "\"println\"",
    "\"info\"",
    "\"repeat\"",
    "\"clltype\"",
    "\"send\"",
    "\"include\"",
    "\"recv\"",
    "\"sendty\"",
    "\"recvty\"",
    "\"discard\"",
    "\"use\"",
    "\"some\"",
    "\"release\"",
    "\"take\"",
    "\"put\"",
    "\"fwd\"",
    "\"fwd!\"",
    "\"cut\"",
    "\"ccut\"",
    "\"par\"",
    "\"cpar\"",
    "\"case\"",
    "\"choice\"",
    "\"offer\"",
    "\"of\"",
    "\"type\"",
    "\"proc\"",
    "\"state\"",
    "\"statel\"",
    "\"usage\"",
    "\"usagel\"",
    "\"state!\"",
    "\"usage!\"",
    "\"state!l\"",
    "\"usage!l\"",
    "\"affine\"",
    "\"coaffine\"",
    "\"cell\"",
    "\"rd\"",
    "\"wrt\"",
    "\"lock\"",
    "\"unlk\"",
    "\"cell!\"",
    "\"empty\"",
    "\"close\"",
    "\"wait\"",
    "\"share\"",
    "\"sshare\"",
    "\"shareL\"",
    "\"shareR\"",
    "\"unfold\"",
    "\"quit\"",
    "\"sleep\"",
    "\"call\"",
    "\"or\"",
    "\"and\"",
    "\"bang\"",
    "\"true\"",
    "\"false\"",
    "\"rand\"",
    "\"struct\"",
    "\"costruct\"",
    "\"mut\"",
    "\"trace\"",
    "\"comut\"",
    "\"sam\"",
    "\"samr\"",
    "<lab>",
    "<Id>",
    "<Num>",
    "\"|\"",
    "\"<-\"",
    "\"->\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"~\"",
    "\".\"",
    "\"!\"",
    "\"?\"",
    "\"??\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<=\"",
    "\"=>\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"=\"",
    "\"!=\"",
    "\"^\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\";;\"",
    "<STRING>",
  };

}
