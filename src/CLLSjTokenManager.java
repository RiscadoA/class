/* Generated By:JavaCC: Do not edit this line. CLLSjTokenManager.java */
import java.util.*;
import java.io.*;
import java.util.logging.*;
import java.util.concurrent.*;

/** Token Manager. */
public class CLLSjTokenManager implements CLLSjConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L || (active1 & 0x10000000000L) != 0L)
            return 0;
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0x7fffffffL) != 0L)
         {
            jjmatchedKind = 96;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x18000224042400L) != 0L || (active1 & 0x40004L) != 0L)
            return 6;
         if ((active0 & 0xffe7fffddbfbda00L) != 0L || (active1 & 0x7ffbfffbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0xbc5400065a00L) != 0L || (active1 & 0x64080008L) != 0L)
            return 6;
         if ((active0 & 0xffef43abfbf98000L) != 0L || (active1 & 0x1bf3fff3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0x63429d20101000L) != 0L || (active1 & 0x40b28272L) != 0L)
            return 6;
         if ((active0 & 0xff8c0122dbe98000L) != 0L || (active1 & 0x1b417d81L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x7f88000018490000L) != 0L || (active1 & 0x18413580L) != 0L)
            return 6;
         if ((active0 & 0x8004013ac3a08000L) != 0L || (active1 & 0x3004801L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x8504001840200000L) != 0L || (active1 & 0x1007800L) != 0L)
            return 6;
         if ((active0 & 0x12293808000L) != 0L || (active1 & 0x2000001L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 96;
               jjmatchedPos = 5;
            }
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x12291800000L) != 0L)
            return 6;
         if ((active0 & 0x2008000L) != 0L || (active1 & 0x2000001L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active1 & 0x2000001L) != 0L)
            return 6;
         if ((active0 & 0x2008000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000L) != 0L)
            return 6;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      case 40:
         return jjStopAtPos(0, 110);
      case 41:
         return jjStopAtPos(0, 111);
      case 42:
         return jjStopAtPos(0, 103);
      case 43:
         return jjStopAtPos(0, 101);
      case 44:
         return jjStopAtPos(0, 124);
      case 45:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 46:
         return jjStopAtPos(0, 106);
      case 47:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 58:
         return jjStopAtPos(0, 125);
      case 59:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L);
      case 60:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000800000000L);
      case 61:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x88000000000000L);
      case 62:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L);
      case 63:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 94:
         return jjStopAtPos(0, 122);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x80000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7600082a90000L, 0x12020143L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x180000000200L, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x224042000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1521800L, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40840018000000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x11440004000L, 0x800004L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2980008900000000L, 0x61013c00L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20020000000400L, 0x8200000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x5600004000008000L, 0x4020L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x208L);
      case 123:
         return jjStopAtPos(0, 112);
      case 124:
         return jjStopAtPos(0, 98);
      case 125:
         return jjStopAtPos(0, 113);
      case 126:
         return jjStopAtPos(0, 105);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 45:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 59:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 61:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         break;
      case 63:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2820000000000L, active1, 0x60d20200L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 6);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x11d40025800L, active1, 0x42L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 6);
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8008000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x3400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000100000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x10100L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x220048000L, active1, 0x84020L);
      case 111:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x8002a90200L, active1, 0x12000011L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 82, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000018000000L, active1, 0x8200008L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x5600004001000000L, active1, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2980000000000000L, active1, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000000000L, active1, 0x4008000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x7f81000000000000L, active1, 0x8003401L);
      case 99:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1600000000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008000020000000L, active1, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x18080000L, active1, 0x8200L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10082a00000L, active1, 0x420062L);
      case 109:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x50000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x900100000L, active1, 0x900000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000000400000L, active1, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000040000000L, active1, 0x80L);
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 6);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000008000L, active1, 0x2000000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 6);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 6);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 6);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 6);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x1021000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 6);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x8000000L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 6);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 6);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 6);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 6);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x8010040010000L, active1, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x5600000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004000000200000L, active1, 0L);
      case 107:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 6);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 6);
         break;
      case 108:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x18080000L, active1, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x4000L);
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 6);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x3400L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x400100L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 6);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 6);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 6);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x2980000080000000L, active1, 0x2000080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x11000000L);
      case 118:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x12040000000L, active1, 0L);
      case 99:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 6);
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 6);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x7d00000000000000L, active1, 0x3000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 112:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 6);
         break;
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000800L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 6);
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x1812000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000000L, active1, 0L);
      case 76:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 6);
         break;
      case 82:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 6);
         break;
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 6);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 6);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 6);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2002000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 6);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 6);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 6);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 6);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 6);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 6);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 6);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 6);
         break;
      case 103:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 6);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         break;
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 6);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 35)
                     jjCheckNAdd(4);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 35)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 34 && kind > 127)
                     kind = 127;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   9, 10, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\146\157\162", 
"\164\157", "\154\145\164", "\154\145\164\143", "\151\156", "\162\145\143", 
"\165\156\163\141\146\145\137\162\145\143", "\143\157\162\145\143", "\154\145\164\41", "\151\156\164", 
"\143\157\151\156\164", "\154\151\156\164", "\143\157\154\151\156\164", "\154\142\157\157\154", 
"\143\157\154\142\157\157\154", "\154\163\164\162\151\156\147", "\143\157\154\163\164\162\151\156\147", 
"\151\146", "\160\162\151\156\164", "\160\162\151\156\164\154\156", "\151\156\146\157", 
"\162\145\160\145\141\164", "\143\154\154\164\171\160\145", "\163\145\156\144", 
"\151\156\143\154\165\144\145", "\162\145\143\166", "\163\145\156\144\164\171", "\162\145\143\166\164\171", 
"\144\151\163\143\141\162\144", "\165\163\145", "\163\157\155\145", "\162\145\154\145\141\163\145", 
"\164\141\153\145", "\160\165\164", "\146\167\144", "\146\167\144\41", "\143\165\164", 
"\143\143\165\164", "\160\141\162", "\143\160\141\162", "\143\141\163\145", 
"\143\150\157\151\143\145", "\157\146\146\145\162", "\157\146", "\164\171\160\145", "\160\162\157\143", 
"\163\164\141\164\145", "\163\164\141\164\145\154", "\165\163\141\147\145", 
"\165\163\141\147\145\154", "\163\164\141\164\145\41", "\165\163\141\147\145\41", 
"\163\164\141\164\145\41\154", "\165\163\141\147\145\41\154", "\141\146\146\151\156\145", 
"\143\157\141\146\146\151\156\145", "\143\145\154\154", "\162\144", "\167\162\164", "\154\157\143\153", 
"\165\156\154\153", "\143\145\154\154\41", "\145\155\160\164\171", "\143\154\157\163\145", 
"\167\141\151\164", "\163\150\141\162\145", "\163\163\150\141\162\145", 
"\163\150\141\162\145\114", "\163\150\141\162\145\122", "\165\156\146\157\154\144", "\161\165\151\164", 
"\163\154\145\145\160", "\143\141\154\154", "\157\162", "\141\156\144", "\142\141\156\147", 
"\164\162\165\145", "\146\141\154\163\145", "\162\141\156\144", "\163\164\162\165\143\164", 
"\143\157\163\164\162\165\143\164", "\155\165\164", "\164\162\141\143\145", "\143\157\155\165\164", 
"\163\141\155", "\163\141\155\162", null, null, null, "\174", "\74\55", "\55\76", "\53", 
"\55", "\52", "\57", "\176", "\56", "\41", "\77", "\77\77", "\50", "\51", "\173", 
"\175", "\74\75", "\75\76", "\76\75", "\74", "\76", "\75\75", "\75", "\41\75", "\136", 
"\73", "\54", "\72", "\73\73", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COM_NEXT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
protected char curChar;
/** Constructor. */
public CLLSjTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CLLSjTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
