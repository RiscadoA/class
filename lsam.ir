filter:
    end points: 1
    types: none
    sessions: s0 s1
    data d0: <[] + tag[[] | []]> (s0)
    data d1: <[int] + []> (s1)
    data d2: <[int]>
entry:
    continueSession(s0, continue_0)
continue_0:
    branchTag(d0, case_next_1:1, case_stop_2:1)
case_next_1:
    callProcess(filter_next, end point, s0 <- s0, s1 <- s1, d2 <-[int] d2)
case_stop_2:
    continueSession(s1, continue_3)
continue_3:
    writeTag(s1, 1)
    continueSession(s1, continue_4)
continue_4:
    finishSession(s0, end point)

primesN:
    end points: 3
    types: none
    sessions: s0 s1 s2
    data d0: <[] + tag[[] | []]> (s0)
    data d1: <[int] + [] + tag[[] | []]> (s1)
    data d2: <[] + [int]> (s2)
entry:
    initializeSession(s1, cut_lhs_0, d1)
    callProcess(sieve, end point, s0 <- s0, s1 <- s1)
cut_lhs_0:
    initializeSession(s2, cut_lhs_1, d2)
    writeExpression(s2, 2)
    finishSession(s2, end point)
cut_lhs_1:
    callProcess(integersfrom, end point, s0 <- s1, d1 <-[int] d2)

printfirstN:
    end points: 2
    types: none
    sessions: s0 s1 s2
    data d0: <[int] + []> (s0)
    data d1: <[int]>
    data d2: <[int]> (s1)
    data d3: <[] + [int]> (s2)
entry:
    branchExpression((move(d1, int) = 0), if_then_0:1, if_else_1:2)
if_then_0:
    continueSession(s0, continue_2)
if_else_1:
    continueSession(s0, continue_4)
continue_2:
    writeTag(s0, 1)
    continueSession(s0, continue_3)
continue_3:
    printLine("DONE.")
    popTask(end point)
continue_4:
    writeTag(s0, 0)
    continueSession(s0, continue_5)
continue_5:
    moveSlots(d2, d0, [int])
    jump(recv_rhs_6)
recv_rhs_6:
    printLine(move(d2, int))
    initializeSession(s2, cut_lhs_7, d3)
    writeExpression(s2, (move(d1, int) - 1))
    finishSession(s2, end point)
cut_lhs_7:
    callProcess(printfirstN, end point, s0 <- s0, d1 <-[int] d3)

main:
    end points: 2
    types: none
    sessions: s0
    data d0: <[] + [int]> (s0)
entry:
    initializeSession(s0, cut_lhs_0, d0)
    writeExpression(s0, 2000)
    finishSession(s0, end point)
cut_lhs_0:
    callProcess(main_ss, end point, d0 <-[int] d0)

sieve:
    end points: 3
    types: none
    sessions: s0 s1 s2 s3 s4
    data d0: <[] + tag[[] | []]> (s0)
    data d1: <[int] + []> (s1)
    data d2: <[int]> (s2)
    data d3: <[int] + [] + tag[[] | []]> (s4)
entry:
    continueSession(s0, continue_0)
continue_0:
    branchTag(d0, case_next_1:3, case_stop_8:1)
case_next_1:
    continueSession(s1, continue_2)
continue_2:
    writeTag(s1, 0)
    continueSession(s1, continue_3)
continue_3:
    moveSlots(d2, d1, [int])
    jump(recv_rhs_4)
recv_rhs_4:
    initializeSession(s3, send_rhs_5, s0)
    writeExpression(s3, move(d2, int))
    finishSession(s3, end point)
send_rhs_5:
    continueSession(s0, continue_6)
continue_6:
    initializeSession(s4, cut_lhs_7, d3)
    callProcess(sieve, end point, s0 <- s0, s1 <- s4)
cut_lhs_7:
    callProcess(filter, end point, s0 <- s4, s1 <- s1, d2 <-[int] d2)
case_stop_8:
    continueSession(s1, continue_9)
continue_9:
    writeTag(s1, 1)
    continueSession(s1, continue_10)
continue_10:
    finishSession(s0, end point)

integersfrom:
    end points: 3
    types: none
    sessions: s0 s1 s2
    data d0: <[] + tag[[] | []]> (s0)
    data d1: <[int]>
    data d2: <[] + [int]> (s2)
entry:
    continueSession(s0, continue_0)
continue_0:
    branchTag(d0, case_next_1:3, case_stop_5:1)
case_next_1:
    initializeSession(s1, send_rhs_2, s0)
    writeExpression(s1, move(d1, int))
    finishSession(s1, end point)
send_rhs_2:
    continueSession(s0, continue_3)
continue_3:
    initializeSession(s2, cut_lhs_4, d2)
    writeExpression(s2, (move(d1, int) + 1))
    finishSession(s2, end point)
cut_lhs_4:
    callProcess(integersfrom, end point, s0 <- s0, d1 <-[int] d2)
case_stop_5:
    finishSession(s0, end point)

filter_next:
    end points: 2
    types: none
    sessions: s0 s1 s2 s3
    data d0: <[] + tag[[] | []]> (s0)
    data d1: <[int] + []> (s1)
    data d2: <[int]>
    data d3: <[int]> (s2)
entry:
    continueSession(s1, continue_0)
continue_0:
    writeTag(s1, 0)
    continueSession(s1, continue_1)
continue_1:
    moveSlots(d3, d1, [int])
    jump(recv_rhs_2)
recv_rhs_2:
    branchExpression(((move(d3, int) % move(d2, int)) = 0), if_then_3:1, if_else_4:2)
if_then_3:
    callProcess(filter_next, end point, s0 <- s0, s1 <- s1, d2 <-[int] d2)
if_else_4:
    initializeSession(s3, send_rhs_5, s0)
    writeExpression(s3, move(d3, int))
    finishSession(s3, end point)
send_rhs_5:
    continueSession(s0, continue_6)
continue_6:
    callProcess(filter, end point, s0 <- s0, s1 <- s1, d2 <-[int] d2)

main_ss:
    end points: 2
    types: none
    sessions: s0
    data d0: <[int]>
    data d1: <[int] + [] + tag[[] | []]> (s0)
entry:
    initializeSession(s0, cut_lhs_0, d1)
    callProcess(printfirstN, end point, s0 <- s0, d1 <-[int] d0)
cut_lhs_0:
    callProcess(primesN, end point, s0 <- s0)
