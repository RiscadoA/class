sam cut { close a |a:wait| fwd a b | b:wait| wait b;() };;

sam cut { wait a;() |a:close| fwd a b | b:close| close b };; 

sam cut { close a |a:wait| fwd a b | b:wait| fwd b c | c:wait| wait c;() };;

sam cut { close a |a:wait| fwd a b | b:wait| fwd b c | c:wait| fwd c d |d:wait| wait d;() };;

sam cut { close a |a:wait| wait a;close c |c:wait| fwd c b |b:wait| wait b;() };;

sam cut { close a |a:wait| wait a;wait c;() |c:close| fwd c b |b:close| close b };;


sam cut { recv a(x);wait x;close a  |a:send close; wait|
          send a(p.close p);fwd a c | c:wait | wait c; ()
};; 

sam cut { recv a(x);wait x;wait a;()  |a:send close; close|
          send a(p.close p);fwd a c | c:close | close c
};; 

sam cut { recv a(x);wait x;recv a(u); wait a; wait u;  ()  |a:send close; send close; close|
          send a(p.close p);fwd a c | c:send close; close | send c(x.close x);close c
};; 

sam cut { recv a(x);wait x;recv a(u);wait u;close a 
          	|a:send close; send close; wait|
          send a(p.close p);fwd a c 
		| c:send close; wait |
	  send c(x.close x); wait c; ()
};; 

sam cut { cut { recv a(x);wait x; fwd a z |z:close| close z }
          |a:send close; wait|
          send a(p.close p);fwd a c 
	  | c:wait |
	  wait c; ()
};;

sam cut { 
    send a(p. close p); close a |a: ~ send close; close | 
fwd a b | b: ~ send close; close | recv b(x); wait x;  fwd b c
| c:wait | wait c; println ("go!"); ()
};;

sam cut { 
    send a(p. close p); send a(p. close p); close a |a: ~ send close; send close;  close | 
fwd a b | b: ~ send close; send close;  close | recv b(x); wait x;  fwd b c
| c: ~ send close;  close | recv c (y); wait y; println ("go1!"); fwd c d
| d:wait | wait d; println  ("go2!"); ()
};;

sam cut { 
    send a(p. close p); send a(p. close p); close a 
   |a: ~ send close; send close;  close | 
    fwd a b 
   | b: ~ send close; send close;  close |
    recv b(x); wait x;  println ("go1!"); recv b(y); wait y; fwd b c
   | c:wait | 
    wait c; println ("go2!"); ()
};;


sam cut { 
   	send a(1); send a(2); close a |a: ~ send lint; send lint;  close | 
	fwd a b | b: ~ send lint; send lint;  close | recv b(x); println (x); recv b(y); println (y);  fwd b c
| c:wait | wait c; println ("go2!"); ()
};;


sam cut { 
   	recv a(x); println (x); recv a(y); println (y); wait a; ()
        | a: send lint; send lint; close |
        println("go send1"); send a(1); fwd a b 
        |b: send lint;  close | 
	println("go send2"); send b(2); println("sent2"); fwd b c 
       | c: close |
	println("go close"); close c
};;

sam cut {
     send n (y:bool. true_(y)); recv n (z:~bool); wait n;
     case z of {
	|#F: wait z; () 
	|#T: wait z; () 
	}
     | n: recv ~bool; send bool; close |
     recv n (v); cut {
     	  not (v,nv) | nv: ~bool | send n(q. fwd q nv); close n
	  }
};;

sam cut {
     send n (y:bool. true_(y)); recv n (z:~bool); wait n; clib(z)
     | n: recv ~bool; send bool; close |
     fwd n m
     | m: recv ~bool; send bool; close |
     recv m (v); cut {
     	  not (v,nv) | nv: ~bool | send m(q. fwd q nv); close m
	  }
};;

     	  
sam cut {
     send n (y:bool. true_(y)); recv n (z:~bool); wait n; clib(z)
     | n: recv ~bool; send bool; close |
     fwd n m
     | m: recv ~bool; send bool; close |
     recv m (v); cut {
     	  not (v,nv) | nv: ~bool | fwd m f
	  | f:send bool; close | send f(q. fwd q nv); close f
	  }
};;	

