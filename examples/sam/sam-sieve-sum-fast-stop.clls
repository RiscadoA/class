
type corec IntStream {
	offer of   {
		|#next: send !lint; IntStream
		|#stop: close
	}
};;

type NextIntStream {
	send !lint; IntStream
};;
 
proc rec integersfrom(n: IntStream; k:~lint)
{
    case n of    {
      	   |#next:  send n(k); integersfrom(n;k+1)
	   	    |#stop: close n
 	   }	   	   
 };;

proc unsafe_rec filter_next(fouts:NextIntStream, fins:~IntStream; n:~lint) {
	#next fins;
	recv fins(v);
	if ((v / n)*n == v) {
		filter_next(fouts, fins; n)
	} else {
		send fouts(v);
		filter(fouts, fins; n)
	}
} and filter(fouts:IntStream, fins:~IntStream; n:~lint) {
	case fouts of {
		|#next:
			filter_next(fouts, fins; n)
		|#stop:
			#stop fins; fwd fins fouts
	}
};;

proc rec sieve(souts:IntStream, sins:~IntStream)
 {
	case souts of { 
		|#next:
			#next sins;
			recv sins(p);
			?p;
			send souts(p);
			cut {
				sieve(souts, outp)
				|outp:IntStream|
				filter(outp,sins;p)
			}
		|#stop:
			#stop sins; wait sins; close souts
	}
 };;

proc primesN(primes:IntStream)
 {
 cut  {
      integersfrom(n;2)
      |n:~IntStream|
      sieve(primes,n)
}
 };;

proc unsafe_rec printfirstN(il:~IntStream;k:~lint)
{
   	if(k==0) {
	  	println("STOP."); #stop il; wait il; println("DONE."); ()
	} else {
		#next il; recv il(n);
		?n;
		print(n); print(" ");
		printfirstN(il;k-1)
   	}
};;

// ATTENTION: n too large causes fully concurrent executor
// to run out of threads

proc main_ss(;np:colint)
{
 cut  {
      primesN(primes)
      |primes:~IntStream|
      printfirstN(primes;np)
      }
 };;

proc primesNC(primes:IntStream)
 {
 ccut  {
      integersfrom(n;2)
      |n:~IntStream|
      sieve(primes,n)
}
 };;

proc mainc_ss(;np:colint)
{
 ccut  {
      primesNC(primes)
      |primes:~IntStream|
      printfirstN(primes;np)
      }
 };;


proc main() {
	cut {
		scan(n)
		|n: ~!lint|
	  	mainc_ss(;n)
	}
};;
