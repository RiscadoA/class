type bool{
    choice of {
        |#F: close
        |#T: close
    }
};;

sam cut {
    	#F s; close s
	|s: ~bool|
	case s of {
	|#F: wait s; () 
	|#T: wait s; () 
	}
};;

sam cut {
    	#T s; close s
	|s: ~bool|
	case s of {
	|#F: wait s; () 
	|#T: wait s; () 
	}
};;


sam cut {
    recv a(x); wait a;
    	 case x of {
	|#F: wait x; ()  
	|#T: wait x; () 
	}
    |a:send bool; close|
    send a(p:bool. #T p; close p);close a
};;

proc false_(bf:bool){
     #F bf;
     close bf
};;

proc true_(bt:bool){
     #T bt;
     close bt
};;

sam cut {false_(s)
	|s: ~bool|
	case s of {
	|#F: wait s; () 
	|#T: wait s; () 
	}
};;


proc clib(b:~bool) {
	case b of {
	|#F: wait b; () 
	|#T: wait b; () 
	}

};;



sam cut {false_(s)
	|s: ~bool|
	clib(s)
};;

sam cut {true_(s)
	|s: ~bool|
	clib(s)
};;

sam cut {
    recv a(x); wait a; case x of {
	|#F: wait x; () 
	|#T: wait x; () 
	}
    |a:send bool; close|
    send a(p:bool. #T p;
     close p);close a
};;


sam cut {
    recv a(x); wait a; clib(x)
    |a:send bool; close|
    send a(p:bool.true_(p));close a
};;

proc not(x:~bool, y:bool){
     case x of {
        |#F:    wait x;
                true_(y)
       |#T:    wait x;
              false_(y)
     } 
};;


sam cut {
    true_(y) |y:~bool| not (y,z) |z:~bool| clib(z)
    };;

