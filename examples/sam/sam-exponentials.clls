
sam cut {
    send a(b.close b); !a(b:wait); wait b; ()
    |a: recv wait; ?close|
    recv a(x); ?a;
    call a(y:close);
    wait x;
    close y
};;

sam cut {
    send a(b.close b); !a(b:wait); wait b; ()
    |a: recv wait; ?close|
    recv a(x); ?a;
    call a(y:close);
    wait x;
    call a(z:close);
    par { close y || close z }
};;


sam cut {
    send a(b.close b); !a(b:wait); wait b; ()
    |a: recv wait; ?close|
    recv a(x); ?a;
    par { call a(y:close);close y || wait x;call a(z:close);close z }
};;

sam cut {
    sendty a (close); send a(p. wait p;()); send a (q. close q); close a
    |a: recvty X; recv X; recv ~X; wait |
    recvty a (X); recv a(x); recv a(y);wait a; fwd x y 
};;

sam cut {
    !a(x); println ("Bingo!"); close x
    |a:?wait|
    ?a;
    fwd! b a
    |b:?wait|
    call b(k);
    wait k;
    fwd! c b
    |c:?wait|
    call c(z);
    wait z;
    call c(y);
    wait y;
    ()
};;

sam cut {
    let! x 20
    |x:?colint|
    println (x+2);
    ()
};;

sam cut {
    recv x(v);println (v); let! x 30
    |x:send !lint;?colint|
    send x (20);
    println (x);
    ()
};;


sam cut {
    recv x (v:?colint); ?v; call v(vx);println(vx); wait x; ()
    | x: send !lint; close |
    send x (z.!z(v);let v 20); close x
};;

sam cut {
    recv u (h); println (h); wait u; ()
    | u:send lint; close |
    recv x (v:?colint); ?v; wait x; call v(vx); send u(vx);close u
    | x: send !lint; close |
    send x (z.!z(v);let v 20); close x
};;


sam cut {
    recv x (v:?colint); ?v; println(v); wait x; ()
    | x: send !lint; close |
    send x (z.!z(v);let v 20); close x
};;
