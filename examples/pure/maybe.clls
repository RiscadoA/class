/*
    We encode the maybe datatype and processes just and nothing. This follows example 2.1 from the paper.
*/

/*
    A session of type maybe(tA) either chooses #Nothing and closes or chooses #Just and continues as something of
    type tA.

    Notice that this type definition is parametric on tA.
*/
type maybe(tA){
     choice of {
        | #Nothing: close
	    | #Just: tA
     }
};;

/*
    We now define the two possible inhabitants of type maybe(tA): nothing and just.
*/

proc nothing<tA>(x:maybe(tA)){
    #Nothing x;
    close x
};;

proc just<tA>(a:~tA, x:maybe(tA)){
    #Just x;
    fwd a x
};;
