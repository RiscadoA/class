type rec treeInt {
    choice of {
        |#Leaf: lint
        |#Node: send treeInt; treeInt
    }
};;

proc rec mapDouble(tin:~treeInt, tout:treeInt){
    case tin of {
        |#Leaf: #Leaf tout;
                let tout 2*tin
        |#Node: recv tin(left:~treeInt);
                #Node tout;
                send tout(x:treeInt. mapDouble(left, x));
                mapDouble(tin,tout)
    }
};;


proc rec printAux(tin:~treeInt, x:close){
    case tin of {
        |#Leaf: print("X"); print("Leaf " + tin); close x
        |#Node: print("Node (");
                recv tin(left:~treeInt);
                cut{
                    printAux(left, y)
                    |y:wait|
                    wait y;
                    print(") (");
                    cut{
                        printAux(tin, z)
                        |z:wait|
                        wait z;
                        print(")");
                        close x
                    }
                }
    }
};;

proc printTree(tin:~treeInt){
    cut{
        printAux(tin, x)
        |x:wait|
        wait x;
        println(" ");
        ()
    }
};;

proc aTree(t:treeInt){
    #Node t;
    send t(tleft:treeInt. #Leaf tleft; let tleft 1);
    #Leaf t; let t 2
};;

proc aTree2(t:treeInt){
    #Node t;
    send t(tleft:treeInt. #Leaf tleft; let tleft 1);
    #Node t;
    send t(tleft2:treeInt. #Leaf tleft2; let tleft2 2);
    #Leaf t; let t 3
};;

proc test_tree(){
    cut{
        aTree2(t)
        |t:~treeInt|
        printTree(t)
    }
};;

proc test_tree2(){
    cut{
        aTree2(t)
        |t:~treeInt|
        mapDouble(t,t2)
        |t2:~treeInt|
        printTree(t2)
    }
};;
