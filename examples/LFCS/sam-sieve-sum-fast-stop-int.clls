type corec IntStream {
	offer of   {
		|#next: send int; IntStream
		|#stop: close
	}
};;

type NextIntStream {
	send int; IntStream
};;
 
proc rec integersfrom(n: IntStream, k:~int)
{
    case n of   {
      	| #next: send n(k); integersfrom(n,k+1)
	   	| #stop: close n
 	   }	   	   
 };;

proc unsafe_rec filter(fouts:IntStream, fins:~IntStream, n:~int) {
	case fouts of {
		|#next:
			filter_next(fouts, fins, n)
		|#stop:
			#stop fins; wait fins; close fouts
	}
} and filter_next(fouts:NextIntStream, fins:~IntStream, n:~int) {
	#next fins;
	recv fins(v);
	if (v%n == 0) {
		filter_next(fouts, fins, n)
	} else {
		send fouts(v);
		filter(fouts, fins, n)
	}
};;


proc rec sieve(souts:IntStream, sins:~IntStream)
 {
	case souts of { 
		|#next:
			#next sins;
			recv sins(p);
			send souts(p);
			cut {
				sieve(souts, outp)
				|outp:IntStream|
				filter(outp,sins,p)
			}
		|#stop:
			#stop sins; wait sins; close souts
	}
 };;

proc primesN(primes:IntStream)
 {
 cut  {
      integersfrom(n,2)
      |n:~IntStream|
      sieve(primes,n)
}
 };;

proc unsafe_rec printfirstN(il:~IntStream,k:~int)
{
   	if(k==0) {
	  	#stop il; wait il; println("DONE."); ()
	} else {
		#next il; recv il(n);
		println(n);
		printfirstN(il,k-1)
   	}
};;

proc main_ss(np:coint)
{
 cut  {
      primesN(primes)
      |primes:~IntStream|
      printfirstN(primes,np)
      }
 };;

proc main() {
	  	main_ss(1000)
};;
