type fun(A,B) {
  recv ~A;B
};;

proc apply<A,B>(f:~fun(A,B),x:~A,res:B) {
   send f (x); fwd f res
};;

proc double(f:fun(lint,lint)) {
  recv f (x);let f 2*x
};;

proc unsafe_rec fact(f:fun(!lint,!lint)) {
  recv f(x);
  if (x == 0) { let! f 1 }	
  { cut {
		fact(fr)
		|fr:~fun(!lint,!lint)|
     	apply<!lint,!lint>(fr,x-1,r)
		|r:~!lint|
		let! f x*r
	    }
   }
};;

proc main0() {
  cut {
	double(f)
	|f:~fun(lint,lint)|
     apply<lint,lint>(f,8,x)
	|x:~lint|
	println(x);()
     }
};;

proc main1() {
  cut {
	fact(f)
	|f:~fun(!lint,!lint)|
     apply<!lint,!lint>(f,8,x)
	|x:~!lint|
	println(x);()
     }
};;
