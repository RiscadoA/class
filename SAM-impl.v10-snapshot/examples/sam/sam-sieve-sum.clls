
type corec IntStream {
     offer of   {
     	   |#next: send !lint; IntStream
	   |#stop: close
 	   }	   	   
 };;
 
proc rec integersfrom(n: IntStream; k:~lint)
{
    case n of    {
      	   |#next:  send n(k); integersfrom(n;k+1)
	   |#stop: close n
 	   }	   	   
 };;
 
proc rec filter(fouts:IntStream, fins:~IntStream;n:~lint)
 {
    #next fins;
     recv fins (v);  
     if  ((v / n)*n == v)
     	 { filter(fouts,fins;n) }
     	 {  
	    case fouts of { 
	    |#next:  send fouts (v); filter(fouts, fins;n) 
	    |#stop:  #stop fins; wait fins; close fouts
	 }
	 }
 };;
 
proc rec sieve(souts:IntStream, sins:~IntStream)
 {
      case souts of { 
  	  |#next:     #next sins;
      		      recv sins (p);
		      ?p;
  	  	      send souts(p);
		      cut  {
		      	   sieve(souts,outp)
		      	   |outp:IntStream|
		      	   filter(outp,sins;p)
		      }
	|#stop: #stop sins; wait sins; close souts
	}
 };;

proc primesN(primes:IntStream)
 {
 cut  {
      integersfrom(n;2)
      |n:~IntStream|
      sieve(primes,n)
}
 };;

proc unsafe_rec printfirstN(il:~IntStream;k:~lint)
{
   if(k==0) {
	  #stop il; wait il; println(" STOP.");()
	 }
   {
	 #next il; recv il(n);
	 ?n;
	 print(n); print(" ");
	 printfirstN(il;k-1)
   }
};;

// ATTENTION: n too large causes fully concurrent executor
// to run out of threads

proc main_ss()
{
 cut  {
      primesN(primes)
      |primes:~IntStream|
      printfirstN(primes;200)
      }
 };;

proc primesNC(primes:IntStream)
 {
 ccut  {
      integersfrom(n;2)
      |n:~IntStream|
      sieve(primes,n)
}
 };;

proc mainc_ss()
{
 ccut  {
      primesNC(primes)
      |primes:~IntStream|
      printfirstN(primes;98)
      }
 };;


sam main_ss();;
sam mainc_ss();;