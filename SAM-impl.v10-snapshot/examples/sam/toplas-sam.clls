type rec Nat{
    choice of {
        |#Z: close      
        |#S: Nat        
    }
};;
	
proc zero(n:Nat){ #Z n; close n };;

proc one(n:Nat){ #S n; zero(n) };;

proc two(n:Nat){#S n; one(n)};;

proc rec dupl(n:~Nat,r:Nat)
{
   case n of {
     |#Z: wait n; #Z r; close r
     |#S: #S r; #S r; dupl(n,r)
   }
};;

proc dup(n:!recv ~Nat;Nat) 
{
	!n(f);
	recv f(x);dupl(x,f)
};;

proc rec printnat(n:~Nat){
    case n of {
        |#Z: wait n; println("#Z");()
        |#S: print("#S");printnat(n)
    }
};;

proc main0()
{
	cut {
	two(n)
	|n:~Nat|
	printnat(n)
	}
};;

proc main1()
{
	cut {
	dup(f)
	|f:~ ! recv ~Nat; Nat|
	par {
	     call f(c1); send c1 (n.one(n)); println("t1"); printnat (c1)
	     ||
	     call f(c2); send c2 (n.two(n)); println("t2"); printnat (c2)
	}
	}
};;

proc rec power2(n:~Nat,r:Nat) 
{
   case n of {
     |#Z: wait n; #S r; #Z r; close r
     |#S: cut { power2(n,r0) |r0:~Nat | dupl(r0,r) }
   }
};;

proc main2()
{
	cut {
	two(n)
	|n:~Nat|
	power2(n,r)
	|r:~Nat|
	power2(r,p)
	|p:~Nat|
//	power2(p,q)
//	|q:~Nat|
	printnat(p)	
	}
};;

sam main0();;

sam main1();;

sam main2();;
